# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RenderDialog
                                 A QGIS plugin
 Ce plugin offre de nouveau render pour les rasters
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-03-24
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Les pingouins
        email                : antoine.anquetil@ensg.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsProject, QgsRasterLayer

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Render_dialog_base.ui'))


class RenderDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(RenderDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.remplir_menu_raster()

    
    def remplir_menu_raster(self):
        """Remplit les combo box avec les couches raster du projet"""
        self.menu_raster.clear()
        self.PIR.clear()
        self.Rouge.clear()

        couches_raster = [
            layer for layer in QgsProject.instance().mapLayers().values()
            if isinstance(layer, QgsRasterLayer)
        ]

        for couche in couches_raster:
            self.menu_raster.addItem(couche.name(), couche.id())
            self.PIR.addItem(couche.name(), couche.id())
            self.Rouge.addItem(couche.name(), couche.id())

