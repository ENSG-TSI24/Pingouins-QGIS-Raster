# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Render
                                 A QGIS plugin
 Ce plugin offre de nouveau render pour les rasters
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-03-24
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Les pingouins
        email                : antoine.anquetil@ensg.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Render_dialog import RenderDialog
import os.path
from qgis.core import QgsProject, QgsRasterLayer
import numpy as np

class Render:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Render_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Nex Render Raster teledetection')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Render', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Render/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Render'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Nex Render Raster teledetection'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        if self.first_start:
            self.first_start = False
            self.dlg = RenderDialog()


        self.dlg.show()

        result = self.dlg.exec_()


        if not result:
            return

        from qgis.core import QgsRasterLayer, QgsProject
        import numpy as np

        # --- 1. Affichage info sur menu_raster ---
        layer_id = self.dlg.menu_raster.currentData()
        layer = QgsProject.instance().mapLayer(layer_id)

        if isinstance(layer, QgsRasterLayer):
            print(f"üì¶ Couche s√©lectionn√©e dans menu_raster : {layer.name()}")

            provider = layer.dataProvider()
            extent = layer.extent()
            cols = layer.width()
            rows = layer.height()

            block = provider.block(1, extent, cols, rows)
            if block:
                array = np.array([
                    [block.value(i, j) for i in range(block.width())]
                    for j in range(block.height())
                ])
                print("‚úÖ Array extrait depuis menu_raster")
                print("Shape:", array.shape)
                print("Min:", np.min(array), "Max:", np.max(array), "Moyenne:", np.mean(array))
            else:
                print("‚ö†Ô∏è Impossible de lire le bloc de la couche menu_raster")

        # --- 2. Calcul NDVI si les deux bandes sont choisies ---
        pir_id = self.dlg.PIR.currentData()
        red_id = self.dlg.Rouge.currentData()

        layer_pir = QgsProject.instance().mapLayer(pir_id)
        layer_red = QgsProject.instance().mapLayer(red_id)

        if not (isinstance(layer_pir, QgsRasterLayer) and isinstance(layer_red, QgsRasterLayer)):
            print("‚ö†Ô∏è Couches PIR ou Rouge non valides ‚Äî NDVI ignor√©")
            return

        # V√©rif dimensions
        if (layer_pir.width() != layer_red.width() or
            layer_pir.height() != layer_red.height() or
            layer_pir.extent() != layer_red.extent()):
            print("‚ùå Les couches PIR et Rouge doivent avoir la m√™me taille et emprise.")
            return

        def raster_to_array(layer):
            provider = layer.dataProvider()
            extent = layer.extent()
            cols = layer.width()
            rows = layer.height()
            block = provider.block(1, extent, cols, rows)
            return np.array([
                [block.value(i, j) for i in range(block.width())]
                for j in range(block.height())
            ])

        array_pir = raster_to_array(layer_pir)
        array_red = raster_to_array(layer_red)

        np.seterr(divide='ignore', invalid='ignore')
        ndvi = (array_pir - array_red) / (array_pir + array_red)
        ndvi = np.nan_to_num(ndvi, nan=-1)

        print("‚úÖ NDVI calcul√©")

        def save_ndvi_as_raster(ndvi_array, ref_layer):
            from osgeo import gdal, osr
            import tempfile, os

            output_path = os.path.join(tempfile.gettempdir(), "/home/formation/Bureau/Pingouins-QGIS-Raster/ndvi_temp.tif")

            rows, cols = ndvi_array.shape
            extent = ref_layer.extent()
            pixel_width = extent.width() / ref_layer.width()
            pixel_height = extent.height() / ref_layer.height()
            origin_x = extent.xMinimum()
            origin_y = extent.yMaximum()

            driver = gdal.GetDriverByName('GTiff')
            dataset = driver.Create(output_path, cols, rows, 1, gdal.GDT_Float32)
            dataset.SetGeoTransform((origin_x, pixel_width, 0, origin_y, 0, -pixel_height))

            crs = ref_layer.crs()
            srs = osr.SpatialReference()
            srs.ImportFromWkt(crs.toWkt())
            dataset.SetProjection(srs.ExportToWkt())

            band = dataset.GetRasterBand(1)
            band.WriteArray(ndvi_array)
            band.SetNoDataValue(-1)
            dataset.FlushCache()
            dataset = None

            return output_path

        ndvi_path = save_ndvi_as_raster(ndvi, layer_red)
        ndvi_layer = QgsRasterLayer(ndvi_path, "NDVI")
        if ndvi_layer.isValid():
            QgsProject.instance().addMapLayer(ndvi_layer)
            print("‚úÖ Raster NDVI affich√© dans QGIS")
        else:
            print("‚ùå Le raster NDVI est invalide")


